- const getInputName = (f, property) => property
- const labelNames = {password: 'Password', firstName: 'First name', lastName: 'Last name', email: 'Email'}
mixin formFor(f, options = {})
  - const url = _.get(options, 'url');
  - const method = _.get(options, 'method', 'get').toLowerCase();
  - const isStandart = _.includes(['get', 'post'], method);
  form.form(action= url method= isStandart ? method : 'post', enctype=options.enctype)&attributes(attributes)
    if !isStandart
      input(name='_method' type='hidden' value= method)
    block

mixin input(f, property, options = { as: 'text', required: false, label: false })
  - const value = f.object[property] === undefined ? '' : f.object[property]
  .form-group(class=(f.errors[property] && 'has-danger'))
    label= options.label || labelNames[property]
    input(name=getInputName(f, property) required=options.required accept=options.accept placeholder=labelNames[property] class='form-control' type=options['as'] value=`${value}`)&attributes(attributes)

    if f.errors[property]
      .invalid-feedback.d-block=f.errors[property].map(({ message }) => message).join('. ')

mixin textarea(f, property, options = { as: 'text', required: false, label: false })
  - const value = f.object[property] === undefined ? '' : f.object[property]
  .form-group(class=(f.errors[property] && 'has-danger'))
    label= options.label || labelNames[property]
    textarea(name=getInputName(f, property) required=options.required placeholder=labelNames[property] class='form-control' type=options['as'] value=value)&attributes(attributes)
      !=value

    if f.errors[property]
      .invalid-feedback.d-block=f.errors[property].map(({ message }) => message).join('. ')

mixin button(f, type = 'submit', className = 'btn-default')
  .form-group
    button(class='btn ' + className type=`${type}` value=`Save`)&attributes(attributes)
      block
